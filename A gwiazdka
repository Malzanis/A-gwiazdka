#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jan 19 14:37:07 2019

@author: malzanis
"""

class Mapa(object):
    def __init__(self):
        self.sciana = []
        self.sciana.append([(2,3),(4,0),(4,1),(2,4),(2,5),(2,6),(3,6),(4,6),(5,6),(5,5),(5,4),(5,3),(5,2),(4,2),(3,2) ])
        
    def heurystyka(self,start,koniec):
        hx=abs(start[0] - koniec[0])
        hy=abs(start[1]- koniec[1])
        return (hx+hy)
    def sasiad(self,pozycja):
        tab = []
        for hx ,hy in [(1,0),(0,1),(-1,0),(0,-1)]:
            x = pozycja[0] + hx
            y = pozycja[1] + hy
            if x < 0 or x > 21 and y < 0 or y > 21:
                continue
            tab.append((x,y))
        return tab
    def koszt_ruchu(self,xr,yr):
        for sciana1 in self.sciana:
            if yr in sciana1:
                return 100 #ustawia blokady na 100
        return 1
def szukaj(start,koniec,mapa): 
    tablica_ruchow={}          
    tablica_kosztow={}          
    
    
    
    
    tablica_ruchow[start] = 0
    tablica_kosztow[start] = mapa.heurystyka(start,koniec)
    wierzcholek=set()
    wierzcholek_otwarty=set([start])
    droga={}
    while len(wierzcholek_otwarty) > 0:
        print()
        pozyc=None
        obc_koszt=None
        for sr in wierzcholek_otwarty:
            if pozyc is None or tablica_kosztow[sr]<obc_koszt:
                obc_koszt=tablica_kosztow[sr]
                pozyc = sr
                            
        if pozyc == koniec:
            cel = [pozyc] #aktualna pozycja
            while pozyc in droga:
                pozyc=droga[pozyc]
                cel.append(pozyc)
            cel.sort()
            return cel,tablica_kosztow[koniec]
        wierzcholek.add(pozyc)
        wierzcholek_otwarty.remove(pozyc)
        for s in mapa.sasiad(pozyc):
            if s in wierzcholek:
                continue
            ruch=tablica_ruchow[pozyc] + mapa.koszt_ruchu(pozyc,s)
            if s not in wierzcholek_otwarty:
                wierzcholek_otwarty.add(s)
            elif ruch>=tablica_ruchow[s]:
                continue
            droga[s]=pozyc
            tablica_ruchow[s]=ruch
            heu=mapa.heurystyka(s,koniec)
            tablica_kosztow[s]=tablica_ruchow[s]+heu

mapa = Mapa()
ruch,koszt = szukaj((0,0),(9,1),mapa)

print("koszt",koszt)
tablica= []
while True:
    
    for i in range(21):
        tablica.append([])
        for j in range(21):
            tablica[i].append('â– ')
        
    for i in [(2,3),(4,0),(4,1),(2,4),(2,5),(2,6),(3,6),(4,6),(5,6),(5,5),(5,4),(5,3),(5,2),(4,2),(3,2)]:
        tablica[i[0]][i[1]] = "X"   
    if koszt> 100:
        break
    print("ruch",ruch)
    for i in ruch:
        tablica[i[0]][i[1]] = 's'
    if koszt > 99:
        break
    for i in range(21):
        print(''.join(tablica[i]))
    break
        #break
